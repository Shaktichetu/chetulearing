1. 
//https://www.geeksforgeeks.org/split-the-given-array-into-k-sub-arrays-such-that-maximum-sum-of-all-sub-arrays-is-minimum/
Split the given array into K sub-arrays such that maximum sum of all sub arrays is minimum.
Given an Array[] of N elements and a number K. ( 1 <= K <= N ) . Split the given array into K subarrays (they must cover all the elements). The maximum subarray sum achievable out of K subarrays formed, must be minimum possible. Find that possible subarray sum.


        public static void main(String[] args) {
        int array[] = { 1, 2, 3, 4 };
        int n = array.length;
        int K = 3;
        System.out.println(solve(array, n, K));
    }
    static boolean check(int mid, int array[], int n, int K)
    {

        int count = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {

            // If individual element is greater
            // maximum possible sum
            if (array[i] > mid)
                return false;

            // Increase sum of current sub - array
            sum += array[i];

            // If the sum is greater than
            // mid increase count
            if (sum > mid) {
                count++;
                sum = array[i];
            }
        }
        count++;

        // Check condition
        if (count <= K)
            return true;
        return false;
    }

    // Function to find maximum subarray sum
    // which is minimum
    static int solve(int array[], int n, int K)
    {
        int start = 1;
        for (int i = 0; i < n; ++i) {
            if (array[i] > start)
                start = array[i];
        }
        int end = 0;

        for (int i = 0; i < n; i++) {
            end += array[i];
        }

        // Answer stores possible
        // maximum sub array sum
        int answer = 0;
        while (start <= end) {
            int mid = (start + end) / 2;

            // If mid is possible solution
            // Put answer = mid;
            if (check(mid, array, n, K)) {
                answer = mid;
                end = mid - 1;
            }
            else {
                start = mid + 1;
            }
        }

        return answer;
    }
    
    
2. /**Given a list of points and a number k, find the k closest points to the origin.**/
    public static void main(String[] args) {
        int points[][] = { { 1, 1 },
                { 3, 3 },
                { 4, 4 },
                { -1, -1 },
                { 2 ,2 } };
        int K = 3;
        pClosest(points, K);
    }

    static void pClosest(int [][]pts, int k)
    {
        int n = pts.length;
        int[] distance = new int[n];
        for(int i = 0; i < n; i++)
        {
            int x = pts[i][0], y = pts[i][1];
            distance[i] = (x * x) + (y * y);
        }

        Arrays.sort(distance);

        // Find the k-th distance
        int distk = distance[k - 1];

        // Print all distances which are
        // smaller than k-th distance
        for(int i = 0; i < n; i++)
        {
            int x = pts[i][0], y = pts[i][1];
            int dist = (x * x) + (y * y);

            if (dist <= distk)
                System.out.println("[" + x + ", " + y + "]");
        }
    }
    
    
