Pattern Asked in ConQsys Exam:-

#include<stdio.h>
int main(){
	int i,j;
	for(i=1;i<=7;i++){
		for(j=1;j<=4;j++){
			if(i==1 && j>2)
			printf("*");
			else printf("");
			
			if((i==2||i==3)&& j>1)
			printf("*");
			else printf("");
			
			if((i==4||i==5 )&& j>2)
			printf("*");
			else printf("");
			
			if(i==6||i==7)
			printf("*");
		}
		printf("\n");
	}
}

1. LCM of two numbers
	int main(){
	int a,b,l;
	printf("\n Enter two number ");
	scanf("%d%d",&a,&b);
	for(l=a>b?a:b;l<=a*b;l=l+(a>b?a:b))  /**or l=1;l<=a*b;l=l++**/
		if(l%a==0 && l%b==0 )
		break;
	
	printf("LCM is %d ",l);	
	
}
		
2. Find prime no between two numbers.
#include <stdio.h>
int main()
{
  int l,u,x,i;
  printf("\n Enter two number. ");
  scanf("%d%d",&l,&u);
     for(x=l+1;x<=u-1;x++){
			for(i=2;i<x;i++)
			if(x%i==0)
			break;
			if(i==x)
			printf("%d ,x);
	 }
  return 0;
}


SUM OF POSITIVE AND NEGATIVE ELEMENTS OF ARRAY - 

#include<stdio.h>
#include<conio.h>

void main()
{ int arr[50],num,i,sum=0,sum_neg=0;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter value %d: ",i+1);
scanf("%d",&arr[i]);
if(arr[i]>=0)
sum=sum+arr[i];
else
sum_neg = sum_neg + arr[i];
}

printf("\n The positive array is: ");
for(i=0;i<num;i++)
{  if(arr[i]>=0)
printf("%d ",arr[i]);
}

printf("\n The negative array is: ");
for(i=0;i<num;i++)
{  if(arr[i]<0)
printf("%d ",arr[i]);
}

printf("\n The sum of the positive elements is %d ",sum);
printf("\n The sum of negative elements is %d",sum_neg);

getch();
}

SUM OF THE ELEMENTS OF THE ARRAY USING POINTER - 

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

void main()
{ int *ptr,i,sum=0,num;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d ",i+1);
scanf("%d",ptr+i);
sum = sum + *(ptr+i);
}

printf("\n The sum of the array is %d ",sum);
getch();
}

SUM OF ELEMENTS OF ARRAY USING POINTER AS ARGUMENT - 

#include<stdio.h>
#include<conio.h>
int addnum(int *,int);

void main()
{ int *ptr,i,sum,num;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);
sum = addnum(ptr,num);
printf("\n The sum of the array is %d ",sum);
getch();
}


int addnum(int *ptr,int n){
int i,sum=0;
for(i=0;i<n;i++){
printf("\n Enter the value %d ",i+1);
scanf("%d",ptr+i);
sum = sum + *(ptr+i);
}
return sum;
}

ROTATE ARRAY ONE BY ONE - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,num,rot,arr[50],temp;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

printf("\n Enter the number of rotation: ");
scanf("%d",&rot);

for(i=0;i<rot;i++){
   temp = arr[0];     // take first element in temparory variable
   for(j=0;j<num-1;j++)  // rotate one by one
   arr[j] = arr[j+1];
   arr[j]= temp;  // for last element
}
printf("\n The array after rotation is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

getch();
}


ROTATE ELEMENTS OF ARRAY BY RIGHT SHIFT - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,num,rot,arr[50],temp;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

printf("\n Enter the number of rotation: ");
scanf("%d",&rot);

for(i=0;i<rot;i++){
   temp = arr[num-1];     // take last element in temparory variable
   for(j=num-1;j>0;j--)  // rotate one by one
   arr[j] = arr[j-1];
   arr[j]= temp;  // for first element
}
printf("\n The array after rotation is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

getch();
}


FIND THE LARGEST ELEMENT IN THE ARRAY - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,num,arr[50],largest;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

largest = arr[0];
for(i=0;i<num;i++){
   if(largest<arr[i])
   largest = arr[i];
}
printf("\n The largest element is %d ",largest);
getch();
}


FIND LARGEST AND SECOND LARGEST ELEMENT OF ARRAY - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,num,arr[50],largest1,largest2,temp;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

largest1 = arr[0];
largest2 = arr[1];

if(largest1 < largest2){
    temp = largest1;
    largest1 = largest2;
    largest2 = temp;
}

for(i=2;i<num;i++){
   if(largest1<arr[i])  {
   largest2 = largest1;
   largest1 = arr[i];
   }
 else if(largest2<arr[i])
       largest2 = arr[i];
}
printf("\n The largest element is %d ",largest1);
printf("\n The sec large element is %d ",largest2);
getch();
}



SEPARATE EVEN AND ODD NUMBERS OF ARRAY - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j=0,num,rot,arr[50],temp,even[20],odd[20],k=0;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);
//Separate even and odd numbers: -

for(i=0;i<num;i++) {
     if(arr[i]%2==0)
	   { even[j]=arr[i];
	   j++;}
       else
	  { odd[k] =arr[i];
	  k++;}
}

printf("\n Even elements are: - ");
for(i=0;i<j;i++)
printf("%d ",even[i]);

printf("\n Odd elements are: - ");

for(i=0;i<k;i++)
printf("%d ",odd[i]);

getch();
}



DELETE ANY SPECIFIC ELEMENT FROM THE ARRAY - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,num,arr[50],found=0,pos;
int key;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

printf("\n Enter the number to be deleted: - ");
scanf("%d",&key);

for(i=0;i<num;i++){
if(arr[i]==key){
found=1;
pos=i;
break;
 }
}
 if(found==1){
for(i=pos;i<num-1;i++){
   arr[i]=arr[i+1];
   }
}

printf("\n The resultant array is:- ");
for(i=0;i<num-1;i++)
printf("%d ",arr[i]);
getch();
}


SEARCH A GIVEN ELEMENT IN ROTATED SORTED ARRAY - 

#include<stdio.h>
#include<conio.h>

int search(int arr[],int,int,int);

void main()
{ int i,num,arr[50];
int key,index;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

printf("\n Enter the number to search: - ");
scanf("%d",&key);

index = search(arr,0,num-1,key);

if(index != -1)
printf("\n The key %d is found and its index is  %d",key,index);
else
printf("\n Key value not found: - ");
getch();
}

int search (int arr[],int l,int h,int key)
{int mid;

if(l>h)
return -1;

mid = (l+h)/2;
if(arr[mid]==key)
return mid;

if(arr[l]<=arr[mid]){
if(key>=arr[l] && key<=arr[mid])
return search(arr,l,mid-1,key);

return search(arr,mid+1,h,key);
}

if(key>=arr[mid] && key<=arr[h]){
return search(arr,mid+1,h,key);

return search(arr,l,mid-1,key);
    }
}

Find maximum value of Sum( i*arr[i]) with only rotations on given array allowed

#include<stdio.h>
#include<conio.h>


void main()
{ int i,j,num,rot,arr[50],temp;
int arrsum=0,currval=0;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
{printf("%d ",arr[i]);
arrsum = arrsum + arr[i];
currval = currval + (i*arr[i]);
}

int maxval = currval;

   for(int m=1;m<num;m++)
  {   currval = currval +arrsum  -num*arr[num-m];
   if(currval>maxval)
    maxval = currval;     }



printf("\n The array after rotation is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);
printf("\n The maximum sum is %d ",maxval);
getch();
}


Maximum sum of i*arr[i] among all rotations of a given array

#include<stdio.h>
#include<conio.h>


void main()
{ int i,j,num,arr[50];
int max=0,currval=0;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

   for(i=0;i<num;i++)
{  currval = 0;
      for(j=0;j<num;j++)
      { int index =(i+j)%num;
      currval += j* arr[index];
	 if(currval>max)
	 max=currval;
      }
}

printf("\n The maximum sum is %d ",max);
getch();
}

ROTATION COUNT IN SORTED AND ROTATED ARRAY - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,j,num,rot,arr[50],temp;
int min_index;
clrscr();
printf("\n Enter the number of elements in sorted and rotated array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

int min = arr[0];
for(i=0;i<num;i++)
{ if(min>arr[i]){
     min=arr[i];
    min_index = i;
     }

}
printf("\n The no of rotation is %d ",min_index);
getch();
}

REVESE AN ARRAY - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,num,arr[50],temp;
int start,end;
clrscr();
printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

start=0;
end=num-1;

while(start<end){
temp = arr[start];
arr[start] = arr[end];
arr[end] = temp;
start++;
end--;
}

printf("\n The reverse array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

getch();
}

ARRAY  WITH RETURNS SUM OF POSITIVE NUMBERS - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,num,arr[50],sum=0;

clrscr();
printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=0;i<num;i++){
     if(arr[i]>0)
     sum = sum + arr[i];
}

printf("\n The sum of positive numbers is %d ",sum);
getch();
}

SELECTION SORT - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,num,rot,arr[50],temp;
int min_index;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=0;i<num-1;i++){
 min_index = i;
    for(j=i+1;j<num;j++){
    if(arr[j]<arr[min_index])
    min_index = j;
    }
      if(i!= min_index)
      {
      temp = arr[i];
      arr[i] = arr[min_index];
      arr[min_index] = temp;
      }
}
printf("\n The array after sorting is: ");
for(i=0;i<num;i++)
printf(" %d ",arr[i]);

getch();
}

CALL BY REFERENCE - 

#include<stdio.h>
#include<conio.h>
int swap(int,int);

void main()
{int a,b;
printf("\n Enter the values of a & b: ");
scanf("%d%d",&a,&b);
swap(a,b);
printf("\n The values are %d and %d ",a,b);
getch();
}

void swap(int a,int b){
int temp;
temp=a;
a=b;
b=temp;
reutrn(a,b);
}

SORT AN ARRAY IN WAVE FORM - 

#include<stdio.h>
#include<conio.h>
void swap(int*,int*);

void main()
{ int i,j,num,rot,arr[50],temp;
int min_index;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=0;i<num-1;i++){    // sorting by selection sort...
 min_index = i;
    for(j=i+1;j<num;j++){
    if(arr[j]<arr[min_index])
    min_index = j;
    }
      if(i!= min_index)
      {
      temp = arr[i];
      arr[i] = arr[min_index];
      arr[min_index] = temp;
      }
}

printf("\n The array after sorting is: ");
for(i=0;i<num;i++)
printf(" %d ",arr[i]);

for(i=0;i<num-1;i+=2)
swap(&arr[i],&arr[i+1]);

printf("\n The wave form of array: ");
for(i=0;i<num;i++)
printf(" %d ",arr[i]);

getch();
}


void swap(int *a,int *b){
int temp;
temp=*a;
*a=*b;
*b=temp;
}


Rearrange positive and negative numbers with constant extra space - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,j,num,rot,arr[50],temp;
int min_index;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=1;i<num;i++){    // using insertion sort.
      temp=arr[i];
      if(temp>0)
      continue;
    for(j=i-1 ;j>=0 && arr[j]>0;j--)
	arr[j+1]=arr[j];
	arr[j+1]=temp;

}

printf("\n The array after sorting is: ");
for(i=0;i<num;i++)
printf(" %d ",arr[i]);

printf("\n The positive and neg arrange : ");
for(i=0;i<num;i++)
printf(" %d ",arr[i]);

getch();
}

INSERTION SORT - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,j,num,rot,arr[50],temp;
int min_index;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=1;i<num;i++){    // using insertion sort like playing card number.
      temp=arr[i];
    for(j=i-1 ;j>=0 && arr[j]>temp;j--)
	arr[j+1]=arr[j];
	arr[j+1]=temp;

}

printf("\n The array after sorting is: ");
for(i=0;i<num;i++)
printf(" %d ",arr[i]);
getch();
}

CHECK INDEXING OF ARRAY STARTS WITH ZERO - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,j,num,rot,arr[50],temp;
int min_index;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=1;i<=num;i++)
printf("%d ",arr[i]);

getch();
}

Move all negative elements to end in order with extra space allowed - 

#include<stdio.h>
#include<conio.h>


void main()
{int i,j,num,rot,arr[50],temp[50];
int min_index;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);
j=0;
for(i=0;i<num;i++){   // separate positive numbers...
      if(arr[i]>=0)
	temp[j++]=arr[i];

}

for(i=0;i<num;i++){
      if(arr[i]<0)
	temp[j++]=arr[i];
}


printf("\n The positive and neg arrange : ");
for(i=0;i<num;i++)
printf(" %d ",temp[i]);

getch();
}


Rearrange a sorted array in maximum minimum form - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,num,arr[50],temp[50];
int small,large;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

small=0,large=num-1;
int flag=1;
for(i=0;i<num;i++){
       if(flag)   // using insertion sort.
      temp[i]=arr[large--];
      else
      temp[i]=arr[small++];
	flag=!flag;
}


printf("\n The max and min arrangement : ");
for(i=0;i<num;i++)
printf(" %d ",temp[i]);
getch();
}

LENGTH OF MAXIMUM BITONIC ARRAY - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,num,arr[50],temp[50];
int max,inc[50],dec[50];
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

inc[0]=1;
dec[num-1]=1;

for(i=1;i<num;i++)
inc[i]=arr[i]>=arr[i-1]?inc[i-1]+1:1;

for(i=num-2;i>=0;i--)
dec[i]=arr[i]>=arr[i+1]?dec[i+1]+1:1;

max = inc[0]+dec[0]-1;

for(i=1;i<num;i++)
if(inc[i]+dec[i]-1>max)
max = inc[i]+dec[i]-1;
printf("\n The bitonic length is %d ",max);
getch();
}

ALTERNATIVE SORTING - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,num,arr[50],temp[50];
int small,large,t;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=1;i<num;i++){     // Insertion Sort
  t=arr[i];
  for(int j=i-1;j>=0 && arr[j]>t;j--)
  arr[j+1]=arr[j];
  arr[j+1]=t;
  }

small=0,large=num-1;
int flag=1;
for(i=0;i<num;i++){
       if(flag)   // using insertion sort.
      temp[i]=arr[large--];
      else
      temp[i]=arr[small++];
	flag=!flag;
}

printf("\n The max and min arrangement : ");
for(i=0;i<num;i++)
printf(" %d ",temp[i]);
getch();
}

SEPARATING EVEN ODD NUMBERS OF AN ARRAY - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,num,arr[50],temp[50];
int even[50],odd[50],t;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

int j=0,k=0;
for(i=0;i<num;i++)
{ if(arr[i]%2==0)
  even[j++]=arr[i];
  else
  odd[k++]=arr[i];
}

printf("\n Separating even odd");
printf("\n Even: ");
for(i=0;i<j;i++)
printf("%d ",even[i]);

printf("\n Odd: ");
for(i=0;i<k;i++)
printf("%d ",odd[i]);
getch();
}

Replace every element with the greatest element on right side - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,num,arr[50],temp;
int j,max_right;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

max_right = arr[num-1];
arr[num-1]=-1;

for(i=num-2;i>=0;i--){
  temp = arr[i];
  arr[i] = max_right;
  if(max_right < temp)
  max_right = temp;
}


printf("\n The resultant array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

getch();
}

naive method : Replace every element with the greatest element on right side - 

 
#include<stdio.h>
#include<conio.h>


void main()
{ int i,num,arr[50],temp;
int j,max_index;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=0;i<num-1;i++){   //take help from selection sort.
  max_index = i+1;
    for(j=i+1;j<num;j++){
    if(arr[j]>=arr[max_index])
    max_index = j;
    }
    arr[i]=arr[max_index];
}
arr[num-1]=-1;

printf("\n The resultant array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

getch();
}


Largest Sum Contiguous Subarray

#include<stdio.h>
#include<conio.h>


void main()
{ int i,num,arr[50],temp[50];
int start=0,end =0, s = 0,max_far=0, max_here = 0,j=0,curr_max;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=0;i<num;i++){
max_here = max_here + arr[i];

if(max_far < max_here)
       {max_far = max_here;start =s,end =i;}

   if(max_here< 0)
  { max_here = 0;s=i+1;}
}

for(i=start;i<=end;i++)
temp[j++]=arr[i];

printf("\n The sum of longest sub array is %d ",max_far);
printf("\n The start and end index are %d & %d ",start,end);
printf("\n The array is: ");

for(i=0;i<=(end-start);i++)
printf("%d ",temp[i]);
getch();
}

Rearrange an array such that \91arr[j]\92 becomes \91i\92 if \91arr[i]\92 is \91j\92 - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,num,arr[50],temp[50],j;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=0;i<num;i++)
   temp[arr[i]]=i; //logic.

printf("\n The rearrange array is: ");
for(i=0;i<num;i++)
printf("%d ",temp[i]);

getch();
}


Replace every array element by multiplication of previous and next

a) First element is replaced by multiplication of first and second.
b) Last element is replaced by multiplication of last and second last.

#include<stdio.h>
#include<conio.h>

void main()
{ int i,num,arr[50],temp[50],j;
int prev,curr;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

prev = arr[0];
arr[0]=arr[0]*arr[1];
for(i=1;i<num-1;i++)
{ curr = arr[i];
  arr[i]=prev *arr[i+1];
  prev = curr;
}
arr[num-1] = prev * arr[num-1];

printf("\n The new array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);
getch();
}


Program to find largest element in an array: - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,num,arr[50],temp[50],j;
int max;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

max=arr[0];
for(i=1;i<num;i++){
    if(arr[i]>max)
    max = arr[i];
    }
printf("\n The maximum element is %d ",max);
getch();
}


K\92th Smallest/Largest Element in Unsorted Array - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,j,num,rot,arr[50],temp;
int k;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=1;i<num;i++){    // using insertion sort like playing card number.
      temp=arr[i];
    for(j=i-1 ;j>=0 && arr[j]>temp;j--)
	arr[j+1]=arr[j];
	arr[j+1]=temp;

}

printf("\n The array after sorting is: ");
for(i=0;i<num;i++)
printf(" %d ",arr[i]);

printf("\n Enter index of kth smallest: ");
scanf("%d",&k);
int key = arr[k-1];
printf("\n The %d small element is %d ",k,key);

int l,large;
printf("\n Enter index of kth largest: ");
scanf("%d",&l);
large = arr[num-l];
printf("\n The %d large element is %d",l,large);
getch();
}


Find Next Greater Element of array - 

#include<stdio.h>
#include<conio.h>


void main()
{ int i,j,num,rot,arr[50],temp[50],next;
int k;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);
 k=0;
for(i=0;i<num;i++){

  for(j=i+1;i<num;j++)
  {  if(arr[i]<arr[j])
      {temp[k++]= arr[j];
      break;
      }
      else {temp[k++]=-1;}
  }

  }
printf("\n The next greater are:");
for(i=0;i<num;i++)
printf("%d ",temp[i]);
getch();
}

Find the maximum repeating number in an array : - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,num,arr[50];
int max,maxcount=0;
clrscr();
printf("\n Enter the number of elements: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The input array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

for(i=0;i<num;i++){
int count=0;
for(j=i+1;j<num;j++){
  if(arr[i]==arr[j])
  count++;
  if(maxcount<count)
      {maxcount=count;
       max=arr[i];}
  }
}
printf("\n The max repeated element is %d and %d times",max,maxcount);
getch();
}


Maximum Sum Path in Two Arrays : -

Given two sorted arrays such the arrays may have some common elements. 
Find the sum of the maximum sum path to reach from beginning of any array to end of any of the two arrays.
We can switch from one array to another array only at common elements.

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,num2,arr1[50],num1,arr2[50];
int sum1=0,sum2=0,result=0;
clrscr();
printf("\n Enter the number of elements in first array: ");
scanf("%d",&num1);

for(i=0;i<num1;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr1[i]);
}

printf("\n The first array is: ");
for(i=0;i<num1;i++)
printf("%d ",arr1[i]);

printf("\n Enter the number of elements in second array: ");
scanf("%d",&num2);

for(i=0;i<num2;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr2[i]);
}

printf("\n The second array is: ");
for(i=0;i<num2;i++)
printf("%d ",arr2[i]);

i=0,j=0;
while(i<num1 && j<num2){
  if(arr1[i]<arr2[j])
     sum1 += arr1[i++];
  else if(arr1[i]>arr2[j])
     sum2 += arr2[j++];

  else{ // meet same element
       if(sum1>sum2)
       result +=sum1;
       else
       result +=sum2;
       sum1 =0,sum2=0;

       while(i<num1 && j<num2 && arr1[i]==arr2[j]) {
       result = result+ arr1[i++];
       j++;

       }
    }
 }
     //add remaning element
     while(i<num1)
     sum1 += arr1[i++];
     while (j<num2)
     sum2 +=arr2[j++];

       if(sum1>sum2)
       result +=sum1;
       else
       result +=sum2;
 printf("\n The max pair sum is %d ",result);
getch();
}


Find the closest pair from two sorted arrays
Given two sorted arrays and a number x, find the pair whose sum is closest to x 
and the pair has an element from each array.

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,num2,arr1[50],num1,arr2[50];
int diff,mindiff=1000,result[5],x;
clrscr();
printf("\n Enter the number of elements in first array: ");
scanf("%d",&num1);

for(i=0;i<num1;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr1[i]);
}

printf("\n The first array is: ");
for(i=0;i<num1;i++)
printf("%d ",arr1[i]);

printf("\n Enter the number of elements in second array: ");
scanf("%d",&num2);
for(i=0;i<num2;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr2[i]);
}

printf("\n The second array is: ");
for(i=0;i<num2;i++)
printf("%d ",arr2[i]);

printf("\n Enter the value of x: ");
scanf("%d",&x);
for(i=0;i<=num1;i++){
   arr1[i];
   for(j=0;j<num2;j++){
     arr2[j];
    diff= (arr1[i]+arr2[j])>=x?(arr1[i]+arr2[j])-x:x - (arr1[i]+arr2[j]);

      if(diff<mindiff)
     {mindiff=diff ;
      result[0]=arr1[i];
      result[1]=arr2[j];
     }
     }
   }
printf("\n The min difference is %d",mindiff);
printf("\n The elements are %d, %d",result[0],result[1]);
getch();
}


Find the largest pair sum in an unsorted array
Given an unsorted of distinct integers, find the largest pair sum in it.
 For example, the largest pair sum in {12, 34, 10, 6, 40} is 74.

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,a[50],num,arr2[50];
int result,first,second;
clrscr();
printf("\n Enter the number of elements in first array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The first array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);

if(a[0]>=a[1])
{first = a[0];
second = a[1]; }
else
   {first = a[1];
   second = a[0];}

   for(i=2;i<num;i++){
     if(a[i]>=first)
     {second = first;
      first = a[i];
      }
      if(a[i]>second &&a[i]<first)
      second = a[i];
   }
   result = first + second;
   printf("\n The largest sum is %d ",result);
   printf("\n The largest two numbers are %d %d",first,second);

getch();
}


Smallest greater elements in whole array : - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,a[50],num,arr2[50];

clrscr();
printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);

printf("\n The closest greater: ");
for(i=0;i<num;i++){
    int diff = 9000,closest = -1;
    for(j=0;j<num;j++){
     if(a[i]<a[j] && a[j]-a[i]<diff)
	{  diff = a[j]-a[i];
	    closest = j;
	   }
    }
    closest==-1?printf("_ "):printf("%d ",a[closest]);
}
getch();
}


Count Strictly Increasing Subarrays
Given an array of integers, count number of subarrays (of size more than one) that are strictly increasing.

Examples:

Input: arr[] = {1, 4, 3}
Output: 1
There is only one subarray {1, 4}

Input: arr[] = {1, 2, 3, 4}
Output: 6
There are 6 subarrays {1, 2}, {1, 2, 3}, {1, 2, 3, 4}
                      {2, 3}, {2, 3, 4} and {3, 4}

Input: arr[] = {1, 2, 2, 4}
Output: 2
There are 2 subarrays {1, 2} and {2, 4}

#include<stdio.h>
#include<conio.h>

void main()
{ int i,j,a[50],num,arr2[50];

clrscr();
printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);

int count=0;
for(i=0;i<num;i++){
  for(j=i+1;j<num;j++){
       if(a[j]>a[j-1])
       count++;
       else
       break;
     }
  }

printf("\n The increasing subarray are %d:",count);
getch();
}


GCDs of given index ranges in an array : - 

#include<stdio.h>
#include<conio.h>

void main()
{ int i,l,r,arr[50],num;
int a,b,temp,min,times,j,k;;
clrscr();
printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

printf("\n How many times would you like to find gcd: ");
scanf("%d",&times);

for(j=0;j<times;j++){
printf("\n Enter the range for gcd no: ");
scanf("%d%d",&l,&r);
int min = 9999;
for(i=l;i<r;i++){
 a=arr[i];
 for(k=i+1;k<=r;k++){
  b=arr[k];
 if(a<b)
  temp =a;
  a=b;
  b=temp;
while(b!=0){
temp=a;
a=b;
b=temp%b;
  }
if(a<min)
min=a;
 }// End of k loop 
}//End of i loop
printf("\n The gcd of this range is %d",min);
}//End of j loop
getch();
}


Largest Sum Contiguous Subarray :-

#include<stdio.h>
#include<conio.h>


void main()
{ int i,arr[50],num,a;
int curr_max,max_tillnow=0;
clrscr();
printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

curr_max=arr[0];
for(i=1;i<num;i++){
curr_max =(arr[i]>=curr_max+arr[i])?arr[i]:(curr_max+arr[i]);
max_tillnow = (curr_max>=max_tillnow)?curr_max:max_tillnow;
}
printf("\n The maximum sum is %d",max_tillnow);
getch();
}

Search, insert and delete in an unsorted array :-

#include<stdio.h>
#include<conio.h>
int findElement(int[],int,int);
insertElement(int[],int,int,int);
deletePosition(int[],int,int);

void main()
{ int i,arr[50],num,a,key,ch;
int index,n,pos;
clrscr();
printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&arr[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",arr[i]);

while(1)
    {
      printf("\n\n1. Find the index of key element: ");
      printf("\n2. Insert the element");
      printf("\n3. Delete Position : ");
      printf("\n4. Exit:");
      printf("\n Enter your choice: ");
      scanf("%d",&ch);
       if(ch==4)
       break;
      switch(ch){
      case 1:printf("\n Enter the key whose index is to found: ");
	     scanf("%d",&key);
	     int k= findElement(arr,num,key);
	     printf("\n The index of key is %d",k);
	     break;

     case 2:printf("\n Enter the index for new element: ");
	    scanf("%d",&index);
	    printf("\n Enter the new element: ");
	    scanf("%d",&key);
	    insertElement(arr,index,key,num);
	    break;
    case 3:printf("\n Enter the position to delete: ");
	   scanf("%d",&pos);
	  deletePosition(arr,pos,num);
	  break;
    default:printf("\n Invalid Choice: ");
    }
}

getch();
}

int findElement(int arr[],int num,int key)
{
int i;
for(i=0;i<num;i++)
 if(arr[i]== key )
    return i;
return -1;
}

insertElement(int arr[],int index,int key,int num)
{ int i;
if(index>=num)
  index=num;
  for(i=num;i>=index;i--)
      arr[i]=arr[i-1];
  arr[index]=key;
  num++;
  printf("\n The array after insertion: ");
	    for(i=0;i<num;i++)
	    printf("%d ",arr[i]);
}

deletePosition(int arr[],int pos,int num)
{  if(pos ==-1 || pos>=num)
    printf("\n Position not found: ");
    for(int i=pos;i<num;i++)
    arr[i]=arr[i+1];
    num--;
    printf("\n The array after delition: ");
     for(i=0;i<num;i++)
     printf("%d ",arr[i]);
}

Given an array A[] and a number x, check for pair in A[] with sum as x :-

#include<stdio.h>
#include<conio.h>
int givenSum(int[],int,int);

void main()
{ int i,j,a[50],num,sum;

clrscr();
printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);

printf("\n Enter your desired sum: ");
scanf("%d",&sum);

int k = givenSum(a,sum,num);
if(k==1)
printf("\n The array pair has given sum:");
else
printf("\n The array pair doesn't have given sum:");

getch();
}

int givenSum(int a[],int sum,int num){

for(int i=0;i<num-1;i++)
{ for(int j=i+1;j<num;j++)
    {if(a[i]+a[j]==sum)
     return 1;
     else
     return 0;
     }
  }
}



Maximum equlibrium sum in an array
Given an array arr[]. Find maximum value of
prefix sum which is also suffix sum for index i in arr[].

#include<stdio.h>

int findMaxSum(int [],int);

int  main()
{ int i,j,a[50],num,sum,r;

printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);

r = findMaxSum(a,num);
printf("\n The max eqlibriam sum is %d ",r);

}

int findMaxSum(int arr[],int n){
	int res = 0,i,j,prefix_sum,suffix_sum;
	for(i=0;i<n;i++){
		prefix_sum = arr[i];
		for(j=0;j<i;j++)
		prefix_sum += arr[j];
		
		suffix_sum = arr[i];
		for(j=n-1;j>i;j--)
		suffix_sum += arr[j];
		
		if(prefix_sum == suffix_sum)
		   if(prefix_sum>res)
			res = prefix_sum;
		
	}
	return res;
}


Equilibrium index of an array
Equilibrium index of an array is an index such that the sum of elements at lower indexes 
is equal to the sum of elements at higher indexes.

#include<stdio.h>
int equilibrium(int [], int );


int  main()
{ int i,j,a[50],num,sum,r;

printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);

r = equilibrium(a,num);
printf("\n The equilibrium index is %d: ",r);

return 0;
}

int equilibrium(int arr[], int n) 
    {
        int i, j;
        int leftsum, rightsum;
 
        /* Check for indexes one by one until an equilibrium
           index is found */
        for (i = 0; i < n; i++) 
        {
            leftsum = 0;  // initialize left sum for current index i
            rightsum = 0; // initialize right sum for current index i
 
            /* get left sum */
            for (j = 0; j < i; j++)
                leftsum += arr[j];
 
            /* get right sum */
            for (j = i + 1; j < n; j++)
                rightsum += arr[j];
 
            /* if leftsum and rightsum are same, then we are done */
            if (leftsum == rightsum)
                return i;
        }
 
        /* return -1 if no equilibrium index is found */
        return -1;
    }



Ceiling in a sorted array

Given a sorted array and a value x, the ceiling of x is the smallest element in array greater than or equal to x,
and the floor is the greatest element smaller than or equal to x. 
Assume than the array is sorted in non-decreasing order. 
Write efficient functions to find floor and ceiling of x.



#include<stdio.h>

int ceilSearch(int[],int,int,int);

int  main()
{ int i,j,a[50],num,sum,low,high,x,r;

printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);

low =a[0];
high = a[num-1];

printf("\n Enter the value to find its ceiling: ");
scanf("%d",&x);

r = ceilSearch(a,low,high,4x);

if(r==-1)
printf("Ceiling doesn't exist: ");
else
printf("Ceiling of %d is %d",x,a[r]);
}


/* Function to get index of ceiling of x in arr[low..high] */
int ceilSearch(int arr[], int low, int high, int x)
{
  int i;    
 
  /* If x is smaller than or equal to first element,
    then return the first element */
  if(x <= arr[low])
    return low;  
 
  /* Otherwise, linearly search for ceil value */
  for(i = low; i < high; i++)
  {
    if(arr[i] == x)
      return i;
 
    /* if x lies between arr[i] and arr[i+1] including
       arr[i+1], then return arr[i+1] */
    if(arr[i] < x && arr[i+1] >= x)
       return i+1;
  }         
 
  /* If we reach here then x is greater than the last element 
    of the array,  return -1 in this case */
  return -1;
}



Majority Element
Write a function which takes an array and prints the majority element (if it exists), 
otherwise prints \93No Majority Element\94. A majority element in an array A[] of size n is an element that appears more 
than n/2 times (and hence there is at most one such element). 

#include<stdio.h>
void findMajority(int arr[], int n);

int  main()
{ int i,j,a[50],num,sum,low,high,x,r;

printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);

findMajority(a, num);
}

void findMajority(int arr[], int n)
{ printf("\n The majority element is: ");

    int maxCount = 0; 
    int index = -1; // sentinels
    for(int i = 0; i < n; i++)
    {
        int count = 0;
        for(int j = 0; j < n; j++)
        {
            if(arr[i] == arr[j])
            count++;
        }
         
        // update maxCount if count of 
        // current element is greater
        if(count > maxCount)
        {
            maxCount = count;
            index = i;
        }
    }
     
    // if maxCount is greater than n/2 
    // return the corresponding element 
    if (maxCount > n/2)
       printf("%d ",arr[index]);
     
    else
        printf("No Majority Element");
}

fixed point 

#include<stdio.h>
int linearSearch(int arr[], int n);

int  main()
{ int i,j,a[50],num,sum,r;

printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);
r = linearSearch(a, num);
printf("\n The fixed point is : %d",r);

}

int linearSearch(int arr[], int n)
{
    int i;
    for(i = 0; i < n; i++)
    {
        if(arr[i] == i)
            return i;
    }
 
    /* If no fixed point present then return -1 */
    return -1;
}



Find a Fixed Point (Value equal to index) in a given array: - 

#include<stdio.h>
void linearSearch(int arr[], int n);

int  main()
{ int i,j,a[50],num,sum,r;

printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);
linearSearch(a, num);


}

void linearSearch(int arr[], int n)
{ printf("\n Fixed point are : ");
    int i;int flag=0;
    for(i = 0; i < n; i++)
    {
        if(arr[i] == i)
            { 
            printf("%d ",i);flag=1;
			}
    }
    if(!flag)
    printf("---");
}

MAXIMUM TRIPLET SUM:-

#include<stdio.h>
int maxTripletSum(int arr[], int n);

int  main()
{ int i,j,a[50],num,sum,r;

printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);
sum=maxTripletSum( a,  num);
printf("\n The max triplet sum is: %d",sum);
}

int maxTripletSum(int arr[], int n)
{
    // Initialize sum with INT_MIN
    int sum = 0;
 
    for (int i = 0; i < n-2; i++)
        for (int j = i + 1; j < n-1; j++)
            for (int k = j + 1; k < n; k++) 
                if (sum < arr[i] + arr[j] + arr[k]) 
                    sum = arr[i] + arr[j] + arr[k];                
    return sum;         
}

FIND TRIPLET HAS GIVEN SUM:-

#include<stdio.h>
void maxTripletSum(int arr[], int n,int );

int  main()
{ int i,j,a[50],num,sum,r;

printf("\n Enter the number of elements in array: ");
scanf("%d",&num);

for(i=0;i<num;i++){
printf("\n Enter the value %d : ",i+1);
scanf("%d",&a[i]);
}

printf("\n The array is: ");
for(i=0;i<num;i++)
printf("%d ",a[i]);

printf("\n Enter your choice sum value: ");
scanf("%d",&sum);
maxTripletSum( a,  num,sum);

}

void maxTripletSum(int arr[], int n,int sum)
{
    
 
    for (int i = 0; i < n-2; i++)
        for (int j = i + 1; j < n-1; j++)
            for (int k = j + 1; k < n; k++) 
                if ( arr[i] + arr[j] + arr[k]==sum) 
                    printf("\n The numbers for given sum: %d %d %d",arr[i],arr[j],arr[k]);               
    			
}

1. Find missing number in an array:- 
    public class MissingElement {
    public static void main(String[] args) {
       int  arr[] = {1, 2, 4, 6, 3, 7, 8,10,9};
       int n = 10;
       int sum = 0;
       int totalSum = n*(n+1)/2;
       for (int i=0;i<arr.length;i++)
            sum += arr[i];
    int missing =  totalSum -sum;
        System.out.println("The missing element is: "+missing);
    }
}


Final 450

1.Find kth smallest element of an array

public static void main(String[] args) {
        int n,k;
        System.out.print("Enter the number of elements of array: ");//Enter 101
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr = new int[n];

        System.out.println("Enter elements in sorted and consecutive order: ");

        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr[i] = scanner.nextInt();
        System.out.print("Enter the value of k: ");
        k = scanner.nextInt();
        Arrays.sort(arr);
        System.out.print("The required element is : "+arr[k-1]);
    }


2. /**Sort array of 0,1 and 2 without any sorting algo **/
    public static void main(String[] args) {
        int n;
        int i, cnt0 = 0, cnt1 = 0, cnt2 = 0;
        System.out.print("Enter the number of elements of array: ");//Enter 101
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr = new int[n];

        System.out.println("Enter elements 0 , 1 n 2: ");

        for ( i = 0;i<n;i++)  // inserting n elements in the array;
            arr[i] = scanner.nextInt();

        System.out.println("The array is: ");
        for (i = 0;i<n;i++)  // inserting n elements in the array;
            System.out.print(arr[i]+" ");

        for (i = 0; i < n; i++) {
            switch (arr[i]) {
                case 0:
                    cnt0++;
                    break;
                case 1:
                    cnt1++;
                    break;
                case 2:
                    cnt2++;
                    break;
            }
        }
        // Update the array
        i = 0;

        // Store all the 0s in the beginning
        while (cnt0 > 0) {
            arr[i++] = 0;
            cnt0--;
        }

        // Then all the 1s
        while (cnt1 > 0) {
            arr[i++] = 1;
            cnt1--;
        }

        // Finally all the 2s
        while (cnt2 > 0) {
            arr[i++] = 2;
            cnt2--;
        }
        System.out.println("\nSorted Array is : ");
        for (i = 0; i < n; i++)
            System.out.print(arr[i] + " ");
    }

3. /**Rotate array clockwise n anticlockwise **/
    public static void main(String[] args) {
        int n;
        System.out.print("Enter the number of elements of array: ");//Enter 101
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr = new int[n];

        System.out.println("Enter elements: ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr[i] = scanner.nextInt();
        System.out.println("\nThe array is : ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            System.out.print(arr[i]+" ");
        /**Logic to rotate clockwise **/
        int temp = arr[n-1];
        for (int i = n-1;i>0;i--)  // inserting n elements in the array;
                arr[i]= arr[i-1];
                arr[0]= temp; //for last element
            //   System.out.print(arr[i]+" ");

        System.out.println("\nThe clock-rotated array is : ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            System.out.print(arr[i]+" ");
        /**Logic to rotate anticlockwise **/
         temp = arr[0];
        for (int i = 0;i<n-1;i++)  // inserting n elements in the array;
            arr[i]= arr[i+1];
        arr[n-1]= temp;

        System.out.println("\nThe anti-rotated array is : ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            System.out.print(arr[i]+" ");
    }

4.Find max contiguous sub-array 

	public static void main(String[] args) {
        int n;
        System.out.print("Enter the number of elements of array: ");//Enter 101
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr = new int[n];

        System.out.println("Enter elements: ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr[i] = scanner.nextInt();
        System.out.println("\nThe array is : ");
        for (int i = 0;i<n;i++)
            System.out.print(arr[i]+" ");
        int max_sum = maxSubArraySum(arr, n);
        System.out.println("Maximum contiguous sum is "
                + max_sum);
    }

    static int maxSubArraySum(int a[], int size)
    {
        int max_so_far = a[0];
        int curr_max = a[0];

        for (int i = 1; i < size; i++)
        {
            curr_max = Math.max(a[i], curr_max+a[i]);
            max_so_far = Math.max(max_so_far, curr_max);
        }
        return max_so_far;
    }

final 450:- 

5. Find kth smallest element of array:-

	public static void main(String[] args) {
        int n,k;
        System.out.print("Enter the number of elements of array: ");//Enter 101
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr = new int[n];

        System.out.println("Enter elements in sorted and consecutive order: ");

        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr[i] = scanner.nextInt();
        System.out.print("Enter the value of k: ");
        k = scanner.nextInt();
        Arr
        System.out.print("The required element is : "+arr[k-1]);
    }


6. public static void main(String[] args) {
        int n,k;
        System.out.print("Enter the number of elements first array: ");//Enter 101
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr1 = new int[n];

        System.out.println("Enter elements: ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr1[i] = scanner.nextInt();
        System.out.println("\nThe first array is : ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            System.out.print(arr1[i]+" ");
        System.out.print("\nEnter the number of elements second array: ");//Enter 101
        n = scanner.nextInt();
        int[]arr2 = new int[n];
        System.out.println("Enter elements: ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr2[i] = scanner.nextInt();
        System.out.println("\nThe second array is : ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            System.out.print(arr2[i]+" ");
        printUnion(arr1, arr2);
        System.out.println("\nThe Intersection is :");
        printIntersection(arr1, arr2);
    }

    static void printUnion(int arr1[], int arr2[])
    {
        HashSet<Integer> hs = new HashSet<>();

        for (int i = 0; i < arr1.length; i++)
            hs.add(arr1[i]);
        for (int i = 0; i < arr2.length; i++)
            hs.add(arr2[i]);
        System.out.println("\nThe union is :");
        System.out.println(hs);
    }

    static void printIntersection(int arr1[], int arr2[])
    {
        HashSet<Integer> hs = new HashSet<>();
        for (int i = 0; i < arr1.length; i++)
            hs.add(arr1[i]);

        for
 (int i = 0; i < arr2.length; i++)
            if (hs.contains(arr2[i]))
                System.out.print(arr2[i] + " ");
    }

 

final 450:- 

  1.    public static void main(String[] args) {
        int n,k;
        System.out.print("Enter the number of elements of array: ");//Enter 101
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr = new int[n];

        System.out.println("Enter elements in sorted and consecutive order: ");

        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr[i] = scanner.nextInt();
        System.out.print("Enter the value of k: ");
        k = scanner.nextInt();
        Arrays.sort(arr);
        System.out.print("The required element is : "+arr[k-1]);
    }

2. 	public static void main(String[] args) {
        int n;
        System.out.print("Enter the number of elements first array: ");//Enter 101
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr1 = new int[n];

        System.out.println("Enter elements: ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr1[i] = scanner.nextInt();
        System.out.println("\nThe first array is : ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            System.out.print(arr1[i]+" ");
        System.out.print("\nEnter the number of elements second array: ");//Enter 101
        n = scanner.nextInt();
        int[]arr2 = new int[n];
        System.out.println("Enter elements: ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr2[i] = scanner.nextInt();
        System.out.println("\nThe second array is : ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            System.out.print(arr2[i]+" ");
        printUnion(arr1, arr2);
        System.out.println("\nThe Intersection is :");
        printIntersection(arr1, arr2);
    }

    static void printUnion(int arr1[], int arr2[])
    {
        HashSet<Integer> hs = new HashSet<>();

        for (int i = 0; i < arr1.length; i++)
            hs.add(arr1[i]);
        for (int i = 0; i < arr2.length; i++)
            hs.add(arr2[i]);
        System.out.println("\nThe union is :");
        System.out.println(hs);
    }

    static void printIntersection(int arr1[], int arr2[])
    {
        HashSet<Integer> hs = new HashSet<>();

        for (int i = 0; i < arr1.length; i++)
            hs.add(arr1[i]);

        for (int i = 0; i < arr2.length; i++)
            if (hs.contains(arr2[i]))
                System.out.print(arr2[i] + " ");
    }


3 . print duplicate elements in an array
	#include<stdio.h>

	int main(){
	int n,arr[100],i,j;
	printf("Enter the number of elements in array: ");
	scanf("%d",&n);
	
	for(i=0;i<n;i++){
	printf("\n Enter the element %d:  ",i+1);	
	scanf("%d",&arr[i]);
	}
	
	printf("The array is");
	for(i=0;i<n;i++)
	printf("%d ",arr[i]);
	
	printf("\n The duplicates are : ");
	for(i=0;i<n;i++){
		for(j=i+1;j<n;j++){
			if(arr[i]==arr[j])
			printf("%d ",arr[j]);
		}
	}
}

4. Merge two sorted array without any extra space.
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n= sc.nextInt();
        int a[] = new int[m];
        int b[] = new int[n];
        int result[] = new int[m+n];

        for (int i=0;i<m;i++){
            a[i] = sc.nextInt();
        }

        for (int j=0;j<n;j++){
            b[j]= sc.nextInt();
        }
        int i= m-1;
        int j = 0;
        while (i>=0 && j<n){
            int temp;
            if (a[i]>b[j]){
               temp = a[i];
               a[i] = b[j];
               b[j] = temp;
            }
            i--;
            j++;
        }
        Arrays.sort(a);
        Arrays.sort(b);

        for (i=0;i<m;i++){
            result[i] = a[i];
        }

        for (i=0;i<n;i++){
            result[m+i] = b[i];
        }

        System.out.println("The result array is: ");
        for (i=0;i<m+n;i++){
            System.out.print(result[i]+" ");
        }
    }


5. Maximaum sub array problem dyanamic programming:- 
    public class KadenaAlgo {
    public static void main(String[] args) {
        int [] a = {-2, -3, 4, -1, -2, 1, 5, -3};
        System.out.println("Maximum contiguous sum is " +
                maxSubArraySum(a));
    }

    static int maxSubArraySum(int a[])
    {
        int size = a.length;
        int max = a[0];
        int max_so_far = a[0];
        for (int i=1;i<size;i++){
                max_so_far = Math.max(a[i],max_so_far+a[i]);
                if (max_so_far>max)
                    max = max_so_far;
        }
        return max;
    }
}

6. maximum subarray problem dyanamic programing :-  
    public class KadenaAlgo {
    public static void main(String[] args) {
        int [] a = {-2, -3, 4, -1, -2, 1, 5, -3};
        System.out.println("Maximum contiguous sum is " +
                maxSubArraySum(a));
    }

    static int maxSubArraySum(int a[])
    {
        int size = a.length;
        int max = a[0];
        int max_so_far = a[0];
        for (int i=1;i<size;i++){
                max_so_far = Math.max(a[i],max_so_far+a[i]);
                if (max_so_far>max)
                    max = max_so_far;
        }
        return max;
    }
}

7. Max sum array problem using nestesd loop 
     public class MaxSubarraySum {
    public static void main(String[] args) {
        int [] a = {-2, -3, 4, -1, -2, 1, 5, -3};
        System.out.println("Maximum contiguous sum is " +
                maxSubArraySum(a));
    }

    static int maxSubArraySum(int a[])
    {
        int size = a.length;
        int sum_max = Integer.MIN_VALUE;

        for (int i = 0; i < size; i++)
        {       int sum = 0;
                for (int j = i;j<size;j++){
                    sum += a[j];
                    if (sum>sum_max)
                        sum_max=sum;
                }
        }
        return sum_max;
    }
}

8. Count pairs with given sum

	public class SumPair {
    	public static void main(String[] args) {
        int n,sum;
        System.out.print("Enter the number of elements of array: ");//Enter 101
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr = new int[n];

        System.out.println("Enter elements: ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr[i] = scanner.nextInt();
        System.out.print("Enter the sum: ");
        sum = scanner.nextInt();
        int count = getPairsCount(arr, n,sum);

        System.out.println("The count pairs is: "+count);
        System.out.println("The array is : ");
        for (int i = 0;i<n;i++)
            System.out.print(arr[i]+" ");
    }

    static int getPairsCount(int[] arr, int n, int k) {
        int count = 0;
        for (int i = 0; i < n; i++)
            for (int j = i + 1; j < n; j++)
                if (arr[i] + arr[j] == k)
                    count++;
        return count;
    }
}

9. Find Inversion Count in an array.
 Inversion Count for an array indicates \96 how far (or close) the array is from being sorted. If the array is already sorted, then the inversion count is 0, but if the array is sorted in the reverse order, the inversion count is the maximum. 
Formally speaking, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j

Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 
has three inversions (2, 1), (4, 1), (4, 3).
	

	public class InversionCount {
    	public static void main(String[] args) {
        int n;
        System.out.print("Enter the number of elements of array: ");
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr = new int[n];

        System.out.println("Enter elements: ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr[i] = scanner.nextInt();
        int count = getInvCount(n,arr);

        System.out.println("The Inversion count is: "+count);
        System.out.println("The array is : ");
        for (int i = 0;i<n;i++)
            System.out.print(arr[i]+" ");
    }

    static int getInvCount(int n,int arr[])
    {
        int inv_count = 0;
        for (int i = 0; i < n - 1; i++)
            for (int j = i + 1; j < n; j++)
                if (arr[i] > arr[j])
                    inv_count++;
        return inv_count;
    }
}

10. find max profit 
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

public class MaxProfit {
    public static void main(String[] args) {
        int n;
        System.out.print("Enter the number of elements of array: ");
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        int[]arr = new int[n];

        System.out.println("Enter elements: ");
        for (int i = 0;i<n;i++)  // inserting n elements in the array;
            arr[i] = scanner.nextInt();
        int maxProfit = maxProfit(arr);

        System.out.println("The maxProfit  is: "+maxProfit);
        System.out.println("The array is : ");
        for (int i = 0;i<n;i++)
            System.out.print(arr[i]+" ");
    }

    static int maxProfit(int[] prices) {
        int minprice = Integer.MAX_VALUE;
        int maxprofit = 0;
        for (int i = 0; i < prices.length; i++) {
            if (prices[i] < minprice)
                minprice = prices[i];
            else if (prices[i] - minprice > maxprofit)
                maxprofit = prices[i] - minprice;
        }
        return maxprofit;
    }
    /**The following is brooth force approach**/
//    static int maxProfit(int prices[]) {
//        int maxprofit = 0;
//        for (int i = 0; i < prices.length - 1; i++) {
//            for (int j = i + 1; j < prices.length; j++) {
//                int profit = prices[j] - prices[i];
//                if (profit > maxprofit)
//                    maxprofit = profit;
//            }
//        }
//        return maxprofit;
//    }
}

11. min no of jump required to reach end of array:-

	public class JumpGame {
    	public static void main(String[] args) {
        int arr[] = {1 ,3, 5, 8, 9, 2, 6, 7, 6, 8, 9};
        int minJump = minJumps(arr);
        System.out.println("The min no of jumps "+minJump);
    }

    static int minJumps(int[] arr){
        int n = arr.length;
        int maxR = arr[0];
        int step = arr[0];
        int jump =1;
        if (n==1) return 0;
        else if(arr[0]==0) return -1;
        else{
            for(int i=1;i<n;i++){
                if(i==n-1) return jump;
                maxR = Math.max(maxR,i+arr[i]);
                step--;
                if(step==0){
                    jump++;
                    if(i>=maxR){
                        return -1;
                    }
                    step = maxR -i;
                }
            }
        }
        return jump;
    }
}

12. Find common elements in 3 sorted array

	public class CommonElements {
    	public static void main(String[] args) {
        ArrayList<Integer> common = new ArrayList<Integer>();
        int array1[] = {2, 4, 8};
        int array2[] = {2, 3, 4, 8, 10, 16};
        int array3[] = {4, 8, 14, 40};
        int x = 0, y = 0, z = 0;
        while (x < array1.length && y < array2.length && z < array3.length){
            if (array1[x] == array2[y] && array2[y] == array3[z]){
                common.add(array1[x]);
                x++;
                y++;
                z++;
            }
            else if (array1[x] < array2[y])
                x++;
            else if (array2[y] < array3[z])
                y++;
            else
                z++;
            
        }
        System.out.println("Common elements from three sorted (in non-decreasing order ) arrays: ");

        System.out.println(common);
    }
}

13. Find if there is a subarray with 0 sum

    public class SumSubarray {
    public static void main(String[] args) {
     int arr[] = {4 ,2 ,-3, 1, 6};
     int n = arr.length;
     boolean found = findsum( arr,n);
        System.out.println("Found: "+found);
    }

    static boolean findsum(int arr[],int n)
    {
        Set<Integer> hs = new HashSet<Integer>();
        int sum = 0;
        for (int i = 0; i < arr.length; i++)
        {
            sum += arr[i];
            if (arr[i] == 0
                    || sum == 0
                    || hs.contains(sum))
                return true;
            hs.add(sum);
        }
        return false;
    }

    /**Below nested loop solution given**/
//    static boolean findsum(int arr[],int n)
//    {
//        boolean sumZero = false;
//
//        for (int i = 0; i < n; i++)
//        {       int sum = 0;
//            for (int j = i;j<n;j++){
//                sum += arr[j];
//                if (sum==0){
//                    sumZero = true;
//                    break;
//                }
//
//            }
//            if(sumZero)break;
//        }
//        return sumZero;
//    }
}

14. Find factorial of large number

	public class LargeFactorial {
    	public static void main(String args[]) throws Exception
    {
        int N = 20;
        System.out.println(factorial(N));
    }
    static BigInteger factorial(int N) {

        BigInteger f
                = new BigInteger("1"); // Or BigInteger.ONE
        for (int i = 2; i <= N; i++)
            f = f.multiply(BigInteger.valueOf(i));

        return f;
    }
}

15. Longest consecutive subsequence :- 
      public static void main(String[] args) {
      int   arr[] = {2,6,1,9,4,5,3};
      int n = arr.length;
      int result = findLongestConseqSubseq(arr,n);
        System.out.println("Longest consecutive subquence: "+result);
    }

    static int findLongestConseqSubseq(int arr[], int n)
    {
        Set<Integer> set = new HashSet<>();
        for(int i:arr)
            set.add(i);
    
        int ans = 0;
        for(int i=0;i<n;i++){
            if(!set.contains(arr[i]-1)){
                int j = arr[i]+1;
                while(set.contains(j))
                    j++;
                ans = Math.max(ans,j-arr[i]);

            }
        }
        return ans;
    }

16. Find wether an array is subset of another:-

     public static void main(String[] args)
    {
        int arr1[] = { 11, 1, 13, 21, 3, 7 };
        int arr2[] = { 11, 3, 7, 1 };

        int m = arr1.length;
        int n = arr2.length;
        String result = isSubset(arr1,arr2,m,n);
        System.out.println("The second array is subset of first: "+result);

    }
    static String isSubset(int arr1[],
                            int arr2[], int m,
                            int n)
    {
        HashSet<Integer> hset = new HashSet<>();
        for (int i = 0; i < m; i++) {
                hset.add(arr1[i]);
        }

        for (int i = 0; i < n; i++)
        {
            if (!hset.contains(arr2[i]))
                return "No";
        }
        return "Yes";
    }

17. Find if triplet exist with given sum.

	public static void main(String[] args) {
        int arr[] = {1, 4, 45, 6 ,10, 8};
        int n = arr.length;
        int sumBe = 15;
        boolean ans = find3Numbers(arr,n,sumBe);
        System.out.println("The given sum exist: "+ans);
    }
    	public static boolean find3Numbers(int arr[], int n, int x) {
        Arrays.sort(arr);
        for(int i=0;i<n-2;i++){
            int j= i+1;
            int k = n-1;
            int sum = x-arr[i];
            while(j<k){
                if(arr[j]+arr[k]==sum)
                    return true;
                if(arr[j]+arr[k]<sum)
                    j++;
                else
                    k--;
            }
        }
        return false;
    }

18. Traping rain water problem :-

	public static void main(String[] args) {
       int  arr[] = {3,0,0,2,0,4};
       int n = arr.length;
       int waterUnit = trappingWater(arr,n);
        System.out.println("Unit of water can be stored: "+waterUnit);
    }
    static int trappingWater(int arr[], int n) {

        int left[] = new int[n];
        int right[] = new int[n];
        int water = 0;
        left[0] = arr[0];
        for(int i=1;i<n;i++){
            left[i] = Math.max(left[i - 1], arr[i]);
        }
        right[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--)
            right[i] = Math.max(right[i + 1], arr[i]);

        for (int i = 0; i < n; i++)
            water += Math.min(left[i], right[i]) - arr[i];

        return water;

    }

19. Chocolate distribution problem:-

	Given an array of n integers where each value represents the number of chocolates in a packet. Each packet can have a variable number      of chocolates. There are m students, the task is to distribute chocolate packets such that: 
    Each student gets one packet.
    The difference between the number of chocolates in the packet with maximum chocolates and packet with minimum chocolates given to the students is minimum.
	public static void main(String[] args) {
        int arr[] = {1,2,5,7,3};
        int m = 3;  // Number of students
        int n = arr.length;
        int result = distribute_chocolate(arr,n,m);
        System.out.println("The min diff is "+result);
    }
    static int distribute_chocolate(int []arr,int n,int m){
        Arrays.sort(arr);
        int min = Integer.MAX_VALUE;
        for(int i=0;i<=(n-m);i++){
                if((arr[m-1+i]-arr[i])<min){
                    min = arr[m-1+i]-arr[i];
                }
        }
        return min;
    }
    
    competative :- other
    
    1./**Finding sum of digits of a number until sum becomes single digit**/
	public class DigitSum {
    public static void main(String[] args) {
        int n = 564;
        System.out.println(digSum(n));
    }
    static int digSum(int n)
    {
        if (n == 0)
            return 0;
        return (n % 9 == 0) ? 9 : (n % 9);
    }
}

2. /**Length of the Longest Consecutive 1s in Binary Representation**/

    public class LongOne {
    public static void main(String[] args) {
        int number,count =0;
        Scanner scanner = new Scanner(System.in);
        System.out.print("Ehter number: ");
        number = scanner.nextInt();
        while (number>0){
            number = number&(number<<1);
            count++;
        }
        System.out.println("The longest consecutive one: "+count);
    }
}

3. Convert Roman to decimal 

    public static void main(String[] args) {
     String roman = "XLIX";
     int num = romanToInt(roman);
        System.out.println("The num is : "+num);
    }
    public static int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap();
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);

        int result = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && map.get(s.charAt(i)) > map.get(s.charAt(i - 1))) {
                result += map.get(s.charAt(i)) - 2 * map.get(s.charAt(i - 1));
            } else {
                result += map.get(s.charAt(i));
            }
        }
        return result;
    }
    
    4. /**Count number of bits to be flipped to convert A to B**/
    public class FlipBits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter first num: ");
        int a  = scanner.nextInt();
        System.out.print("Enter second num: ");
        int b = scanner.nextInt();
        int flip = a^b;
        int count =0;
        while (flip>0){
            flip = flip&(flip-1); /**count number of one**/
            count++;
        }
        System.out.println("The flip bits are: "+count);
    }
}

5. /**Given a list of integers, return the largest product that can be made by multiplying any three integers.**/
    public class MaxTriplet {
    public static void main(String[] args) {
        int arr[]= {-10, -10, 5, 2};
        int n = arr.length;
        Arrays.sort(arr);
        int max = Math.max(arr[0]*arr[1]*arr[n-1],arr[n-1]*arr[n-2]*arr[n-3]);
        System.out.println("The max sum is: "+max);
    }
}

6. /**Maximum Product Subarray**/
    public static void main(String[] args) {
        int arr[] = { 1, -2, -3, 0, 7, -8, -2 };
        int max = arr[0];
        for (int i=0;i<arr.length;i++){
            int mul = arr[i];
            for (int j=i+1;j<arr.length;j++){
                mul = mul *arr[j];
                max = Math.max(mul,max);
            }
        }
        System.out.println("The max sum: "+max);
    }
    
    
    7. /**Write a program that, given an array A[] of n numbers and another number x,
     * determines whether or not there exist two elements in S whose sum is exactly x.**/
        public static void main(String[] args) {
        int arr[] = { 1, 4, 45, 6, 10, 8};
        int k = 16;
        for (int i=0;i<arr.length;i++){
            for (int j=i+1;j<arr.length;j++){
                if (arr[i]+arr[j]==k)
                    System.out.println(arr[i] +" "+arr[j]);
            }
        }
    }
    
    8. /**Write a program that, given an array A[] of n numbers and another number x,
     * determines whether or not there exist two elements in S whose sum is exactly x.**/
        
        public static void main(String[] args) {
        int arr[] = {1, 4, 45, 6, 10, 8, 8};
        int sum = 16;
        Set<Integer> s = new HashSet<Integer>();
        for (int i = 0; i < arr.length; i++) {
            int temp = sum - arr[i];
            if (s.contains(temp)) {
                System.out.println(arr[i] + ", " + temp);
            } else {
                s.add(arr[i]);
            }
        }
    }
    
9. /**Remove repeated elements from array**/
    public static void main(String[] args) {
      int[]  arr = {9, 2, 7, 4, 7};
        Set<Integer> set = new HashSet<>();
        for (int i=0;i<arr.length;i++){
            set.add(arr[i]);
        }
        System.out.println(set);
    }
    
10. /**Remove repeated word in string array.**/
       public static void main(String[] args) {
        String str = "big black bug bit a big black dog on his big black nose";
        String[]words = str.split(" ");
        Set<String> set = new HashSet<>();
        for (int i=0;i<words.length;i++){
            set.add(words[i]);
        }
        System.out.println(set);
    }
    
 11. /**Print repeated elements of an array**/
    public static void main(String[] args) {
        int []arr= {2, 10,10, 100, 2, 10, 11,2,11,2};
        Set<Integer> set = new HashSet<>();
        for (int i=0;i<arr.length;i++){
            for (int j=i+1;j<arr.length;j++){
                if (arr[i]==arr[j])
                    set.add(arr[i]);
            }
        }
        System.out.println(set);
    }
    
 12.   /**Print repeated words from string Array**/
        public static void main(String[] args) {
        String[] words = {"big","black","bug","black","dog","on","big"};
        Set<String> set = new HashSet<>();
        for (int i = 0; i < words.length; i++) {
            for (int j = i + 1; j < words.length; j++) {
                if (words[i] == words[j])
                    set.add(words[i]);
            }
        }
        System.out.println(set);
    }
    
13.    /**Find repeating and missing element in an array.**/
       public static void main(String[] args) {
        int arr[] = {1, 2, 2, 4};
        int n = arr.length;
        int sum = n * (n + 1) / 2;
        int sum_arr = 0;
        int repeating = -1;
        Arrays.sort(arr);
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] == arr[i - 1]) {
                repeating = arr[i];
                break;
            }
        }
        for (int i = 0; i < n; i++) {
            sum_arr += arr[i];
        }
        int missing = sum + repeating - sum_arr;
        System.out.println("repeating: " + repeating + ", missing: " + missing);
    }
    
 14. /**
     * Find a pair with given difference.
     **/
    public static void main(String[] args) {
        int arr[] = {5, 20, 3, 2, 5, 80};
        int diff = 78;
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (Math.abs(arr[i] - arr[j]) == diff) {
                    System.out.println(arr[i] + "  " + arr[j]);
                    return;
                }
            }
        }
    }
    
 15. /**Find a pair with given difference.**/
        public static void main(String[] args) {
        int arr[] = {5, 20, 3, 2, 5, 80};
        int diff = 78;
        int i = 0, j = 1;
        Arrays.sort(arr);
        while (i < arr.length && j < arr.length) {
            if (arr[j] - arr[i] == diff) {
                System.out.println(arr[i] + " " + arr[j]);
                return;
            } else if (arr[j] - arr[i] < diff)
                j++;
            else i++;
        }
    }
    
16. /**  Find the element that appears once in an array where every other element appears twice**/
    public static void main(String[] args) {
        int arr[] = {2, 3, 5, 4, 5, 3, 4};
        int res = arr[0];
        for (int i=1;i<arr.length;i++){
            res = res ^ arr[i];
        }
        System.out.println(res);
    }
    
17. /**Find non repeating elements in an array**/
     public static void main(String[] args) {
        int arr[] = {2, 3, 5, 4, 5, 3, 4, 1, 8};
        for (int i = 0; i < arr.length; i++) {
            int count = 0;
            for (int j = 0; j < arr.length; j++) {
                if (arr[i] == arr[j] && i != j) {
                    count++;
                    break;
                }
            }
            if (count == 0)
                System.out.print(arr[i] + " ");
        }
    }                            
                     
18. /**  Create a class that initializes with a list of numbers and has one method called sum. sum should take in two parameters, 
     * start_idx and end_idx and return the sum of the list from start_idx (inclusive) to end_idx` (exclusive).**/
    public static void main(String[] args) {
        int arr[]= {1,2,3,4,5,6,7};
        int start_idx = 2;
        int end_idx = 5;
        int sum= 0;
        for (int i =start_idx;i<end_idx;i++){
            sum += arr[i];
        }
        System.out.println(sum);//3+4+5 = 12
    }
    
 19. /**Left rotation of an Array by order of 1*/
    /**Given an array and an integer k, rotate the array by k spaces. Do this without generating a new array and without using extra space.*/
    public static void main(String[] args) {
        int arr[] = { 1, 3, 5, 7, 9 };
        int n = arr.length;
        int k = 2;
        int mod = k % n;
        for (int i = 0; i < n; i++)
            System.out.print(arr[(i + mod) % n] + " ");
    }
                            
20. Second largest element in an array without any sorting algo
     public static void main(String[] args) {
       int arr[] = {9,8,15,7,6,5,4,3,2,1};
       int largest = arr[0];
       int second = arr[1];

       if(second>largest){
           largest = arr[1];
           second = arr[0];
       }
       for (int i=2;i<arr.length;i++){
           if(arr[i]> largest ){
               second = largest;
               largest = arr[i];
           }else if(arr[i]>second){
               second = arr[i];
           }
       }
        System.out.println(second);
    }

